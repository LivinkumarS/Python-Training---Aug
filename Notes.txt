Python 
------
>> It is High-level, interpreted, general-pupose programming language,

High-level--> It is very close to human language.
interpreted--> Runs line by line, no need for compilation like c/c++.


>> Very Simple Syntax --> looks like english.
>> Huge community support.

Extension for python file ---> .py

Basic Python syntax 
--------------------
>> Every python program is written inside a .py file.
>> to Execute a python code--> "python filename"
>> case-sensitive.
>> Indentation ---> space before a block of code. 
>> No semicolon needed.

To create comments
---------------------
To create a single line comment---> # as a prefix
multi-line comment--> ''' your comment '''


Datatypes
----------
Basic Datatypes:
----------------
Int-->
Float-->

String---> Collection of multiple characters are called String. we need to use either '' or "" to create a String.
Ex: "Hello", "Hi", 'Hello world!'

I'm from karur.
I love the following quote "The qoute!"

Boolean--->

Variables
------------
>> Stores a single piece of data.
varName=value
>> It is a container used to store data in memory.

Rules for naming:
-----------------
>> start with letters or "_" underscore.
>> it can only contain 0-9, a-z, A-Z, _
>> you cannot use revserved keyword.


To show something in the output
-------------------------------
print()

To prompt input from user
--------------------------
input()---> it will always give string.


Datatypes 
----------
type(val) --> it will return datatype the given value

int --> whole number --> -3,-2,-1,0,1,2,3....
float --> decimal numbers --> 4.445, 5.0

string -->sequence of characters. '' or "".
concat--> attaching two strings.. str1+str2
string formatting ---> f''

bool ---> True or False

Type Casting
-------------
str(val)  --> converts into string
int(val)  --> converts into int
float(val)  --> converts into float
bool(val)  --> converts into boolean

Operators
----------
>> a symbol that performs operations on a value.

Arithmetic (numeric values)
----------------------------
Addition ---> +.
Subtraction ---> -.
Multiplication ---> *.
Division ---> /.
Floor ---> //  40//3-->13
Mod ---> % --> Reminder. Ex:40%2-->0, 39%2-->1, 100%99-->1, 3%2-->1,2%3-->2.
Exponentiate --> ** --> order. 2**2-> 2 power 2-->4

BODMAS---> Brackets Order(of) Div Mul Add Sub.

Comparison or Relational Operators (boolean)
-----------------------------------
== --> equal to
!= --> not equal.
> --> Greater than
< --> Lesser than
>= --> GT or equal
<= --> LT or equal

Logical Operator (combines two booleans)
-----------------
AND --> and --> True --> only when both conditions are True
OR  --> or  --> True ---> when any one condition is True.
NOT --> not --> inverts a boolean value.

bool1  bool2   AND     OR
True   True    True    True
True   False   False   True
False  True    False   True
False  False   False   False

Assignment Operator 
--------------------
= --> assign 
+= --> add and assign
-= --> sun and assign
*= --> mul and assign
/= --> div and assign
//= --> floor div assign
%= --> mod and assign
**= --> expo assign

Bitwise
--------
(Works on binary representations)
AND --> & --> performs and operation between two bits.--> 3 & 8
OR ---> | --> performs or operation between two bits. 3 | 9

not --> ~ --> ~12. not operation with bits. ~x=-(x+1)

ex-or --> short circuit -->performs x-or operation between two bits. --> ^ --> 3 ^ 9

left shift---> x<<y --> move the bits towards left for defined places. 10<<2

right shift--> x>>y move the bits towards right for defined places. 10>>2