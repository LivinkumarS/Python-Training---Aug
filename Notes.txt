Python 
------
>> It is High-level, interpreted, general-pupose programming language,

High-level--> It is very close to human language.
interpreted--> Runs line by line, no need for compilation like c/c++.


>> Very Simple Syntax --> looks like english.
>> Huge community support.

Extension for python file ---> .py

Basic Python syntax 
--------------------
>> Every python program is written inside a .py file.
>> to Execute a python code--> "python filename"
>> case-sensitive.
>> Indentation ---> space before a block of code. 
>> No semicolon needed.

To create comments
---------------------
To create a single line comment---> # as a prefix
multi-line comment--> ''' your comment '''


Datatypes
----------
Basic Datatypes:
----------------
Int--> Whole number --> -2,-1,1,0,1,2,3,4,5....
Float--> decimal numbers  --> Ex: 1.10, 3.14...

String---> Collection of multiple characters are called String. we need to use either '' or "" to create a String.
Ex: "Hello", "Hi", 'Hello world!'

I'm from karur.
I love the following quote "The qoute!"

it is an Iteratable object. "Hello world" ---> using index number we can access each and every char in it.  

Boolean--->True, False

Variables
------------
>> Stores a single piece of data.
varName=value
>> It is a container used to store data in memory.

Rules for naming:
-----------------
>> start with letters or "_" underscore.
>> it can only contain 0-9, a-z, A-Z, _
>> you cannot use revserved keyword.


To show something in the output
-------------------------------
print()

To prompt input from user
--------------------------
input()---> it will always give string.


Datatypes 
----------
type(val) --> it will return datatype the given value

int --> whole number --> -3,-2,-1,0,1,2,3....
float --> decimal numbers --> 4.445, 5.0

string -->sequence of characters. '' or "".
concat--> attaching two strings.. str1+str2
string formatting ---> f'{var1} {var2}..'
iteratable datatype.

String Operations 
------------------
concatination: +
repetition: *
Membership: in, not in

in-built methods 
----------------
.upper() ---> convert into uppercase.
.lower() ---> convert into lowercase.
.title() ---> convert into titlecase.

.isalpha()---> only alpha char
.isdigit()---> only numeric char

.find(sub) ---> return the Position of the substring in a string. -1 --> sub is not found
.replace(sub1, sub2) --> to replace a substring.

.split() --> to split a string and store it in a list.
.join() --> to join the strings in a list.

.strip() --> it removes spaces at begenning and end.

Escape Char 
------------


bool ---> True or False

Type Casting
-------------
str(val)  --> converts into string
int(val)  --> converts into int
float(val)  --> converts into float
bool(val)  --> converts into boolean
list()
set()
tuple()
dict()

Operators
----------
>> a symbol that performs operations on a value.

Arithmetic (numeric values)
----------------------------
Addition ---> +.
Subtraction ---> -.
Multiplication ---> *.
Division ---> /.
Floor ---> //  40//3-->13
Mod ---> % --> Reminder. Ex:40%2-->0, 39%2-->1, 100%99-->1, 3%2-->1,2%3-->2.
Exponentiate --> ** --> order. 2**2-> 2 power 2-->4

BODMAS---> Brackets Order(of) Div Mul Add Sub.

Comparison or Relational Operators (boolean)
-----------------------------------
== --> equal to
!= --> not equal.
> --> Greater than
< --> Lesser than
>= --> GT or equal
<= --> LT or equal

Logical Operator (combines two booleans)
-----------------
AND --> and --> True --> only when both conditions are True
OR  --> or  --> True ---> when any one condition is True.
NOT --> not --> inverts a boolean value.

bool1  bool2   AND     OR
True   True    True    True
True   False   False   True
False  True    False   True
False  False   False   False

Assignment Operator 
--------------------
= --> assign 
+= --> add and assign
-= --> sun and assign
*= --> mul and assign
/= --> div and assign
//= --> floor div assign
%= --> mod and assign
**= --> expo assign

Bitwise
--------
(Works on binary representations)
AND --> & --> performs and operation between two bits.--> 3 & 8
OR ---> | --> performs or operation between two bits. 3 | 9

not --> ~ --> ~12. not operation with bits. ~x=-(x+1)

ex-or --> short circuit -->performs x-or operation between two bits. --> ^ --> 3 ^ 9

left shift---> x<<y --> move the bits towards left for defined places. 10<<2

right shift--> x>>y move the bits towards right for defined places. 10>>2

Controls Flow
--------------
Executes a block of code according  to the condition given.

indentation:
-------------
>> python does not use {} to seperate block of code.
>> So, indentation  (space) needed to seperate it

syntax:
--------
if condition:
    #block of code
elif condition:
    #block of code
else:
    #block of code

Nested If
-----------
>> if block inside another.

if con:
    if con:
        block of code

Loops
-------
>> It avoids repitition

Types:
------
while loop:

>> it keeps executes the block of code as long as the given condition is True.

syntax:
while condition:
    block of code

For loop:
----------
it is used to iterate an iteratable object
syntax:
--------
for var in iterObj:
    block of code

range ---> it will create an iteratable object with defined lenght. 

range(end) --> range(10) --> [0,1,2,3,4,5,6,7,8,9]
range(start,end) --> range(5,10) --> [5,6,7,8,9]
range(start, end, step) ---> range(0,11,2) -->[0,2,4,6,8,10]

Control statement
--------------------
break ---> loop will be broken
continue --> to skip the current iteration


100

0-100

if div by 3
if div by 5
if it can be div by both.. "buzz"

0,1,2,4,7,8,11,13,14,'buzz'.....98

Indexing and Slicing
---------------------
Indexing --> obj[ind] 
Slicing--> obj[start:], obj[:end], obj[start:end]


Datastructures 
---------------
List 
----
>> Mutable, allows duplicate, iterable.
[] ---> to create a list.

[1,2,3,"five",True]

in built methods
-----------------
.append(val) -->  adds up value at end
.insert(ind, val)--> adds an obj at specified index.
.remove(value) --> removes specified value. first occur
.pop() --> remove the last element
.sort()--> to arrage elements in ascending order
.reverse() --> to reverse the list
.count(obj)---> to find number of occur. 0---> no occur 
.index(obj) --> index number. error--> no occurance

Tuple
-----
>> immutable, iterable, allows duplicate.
>> ()
>> faster than list.

packing/unpacking
------------------
x,y,z=tuple

Sets 
-----
>> {}. it allows only unique values.

in built methods for it 
--------------------------
set1.union(set2) ---> union values
set1.intersection(set2) ---> common values
set1.difference(set2) ---> unique values

dict 
----
{
    key:value,
    key:value,
    key:value,
    key:value,
}

mutable.

in built methods 
----------------
.keys(),
.values(),
.items--> [(key1,val1),(key1,val2)]

.pop()
.clear()


Functions
-----------
>> function is a block of reusable code that performs a specific task.
>> Avoids repetition.
>> makes code more readable ad modular.

syntax:
--------
def funName():
    #block of code

funName() --> call a function

Parameters and Arguements
--------------------------
P ---> the variables we initiate while creating a function.
a ---> the values we are assigning to the Parameters while calling a function

type 1: Positional Arguements (mostly used method)
------------------------------
>> Order matters

type 2: Default Arguements
---------------------------
>> assign default value for parameter

type 3: Keyword Arguements
----------------------------
>> use parameter names

type 4: arbitary Arguements
----------------------------
>> passing list of values as arguement.

Return keyword 
--------------
>> to stop a function.
>> to return a piece of data to the caller.

Scopes
--------
>> the place where we can get access to variables.

local scope ---> variables that are created inside a function.
>> it can be accessed only within that function

global scope ---> variables that are created outside a function.
>> it can be accessed anywhere.

Exception Handling
-------------------
>> Exception is an event that interrupts the normal flow of a program.

try:
    block of code 
except ErrName:
    handling block
except ErrName:
    handling block
except ErrName:
    handling block
finally:
    block of code